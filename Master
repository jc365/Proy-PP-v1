#include <SoftwareSerial.h>
#include <AltSoftSerial.h>

#define VERSION "Mf4 -> "
#define DBGLVL -1

// AltSoftSerial always uses these pins:
//
// Board          Transmit  Receive   PWM Unusable
// -----          --------  -------   ------------
// Arduino Uno        9         8         10
//
// El HC-05 (bluetooth) est√° conectado a los pines: 8 (TX) y 9 (RX)

// Constantes 

#define DhtGND  8       // Pin GND del DHT22
#define DhtPIN  9       // Pin de lectura del DHT22
#define DhtVCC  10      // Pin VCC del DHT22
#define DhtTYPE DHT22   // Tipo de sensor de temperatura y humedad (DHT22)  
#define ZigVCC  2       // Detalle de los pines ...
#define ZigTX   3       // a los que conectado el ...
#define ZigRX   4       // Remote ZigBee CC2530 ...   
#define ZigGND  5       // 2.4G Serial 
#define releFAR 12      // Pin de control del Rele 1 (Farolas)
#define releCST 13      // Pin de control del Rele 2 (Caseta)
#define releCHM 6       // Pin de control del Rele 3 (Chamizo)
#define releCAR 7       // Pin de control del Rele 4 (Caravana)
#define MI_ID   0       // Identificador del modulo ZigBee (id=0 para MASTER; id=1 para REMOTO1)

SoftwareSerial Zig(ZigTX, ZigRX);
AltSoftSerial  Bt;

String str, srv, temp, hume;
int a = 0;

void setup() {
  // activar pines de alimentacion
  pinMode(ZigVCC, OUTPUT);  digitalWrite(ZigVCC, HIGH);
  pinMode(ZigGND, OUTPUT);  digitalWrite(ZigGND, LOW);
  Zig.begin(57600);
  Serial.begin(9600);
  Bt.begin(38400);  
  //delay(2000); 
  log_v2(1,"Arranque de la placa CENTRAL...",-99,-99,-99,-99);  
}  

void loop() {
  delay(1600);                            // Calculado por tanteo
  if (Serial.available()) leer_Serial();  // Permite el envio de MSG-prueba por consola 
  if (Zig.available())    leer_Zig();     // Salida/Contestacion de MSGs con remotos
  if (Bt.available())     leer_Bt();      // Entrada productiva de MSGs
}


void leer_Serial() {
  log_v2(2,"Entrando en leerSerial()",-99,-99,-99,-99);
  String msg = "";
  char inChar;
  // posicionamiento al principio del mensaje
  while (Serial.available() && inChar != '#' ) {
    inChar = Serial.read();
    log_v2(3,"Serial- Leido y desechado: "+inChar,-99,-99,-99,-99);
  } 
  // carga msg hasta final del mensaje
  while (Serial.available() && inChar != '/' ) {
    inChar = Serial.read();
    msg += inChar;
  }  
  log_v2(1,"MSG leido: #"+msg,-99,-99,-99,-99);
  formatear_msg(msg);
}

void leer_Zig() {
  log_v2(2,"Entrando en leerZig()",-99,-99,-99,-99);
  String msg = "";
  char inChar;
  // posicionamiento al principio del mensaje
  while (Zig.available() && inChar != '#' ) {
    inChar = Zig.read();
    log_v2(3,"Zig- Leido y desechado: "+inChar,-99,-99,-99,-99);
  }  
  // carga msg hasta el final del mensaje
  while (Zig.available() && inChar != '/' ) {
    inChar = Zig.read();
    msg += inChar;
  }  
  log_v2(1,"MSG leido: #"+msg,-99,-99,-99,-99);
  formatear_msg(msg);
}

void leer_Bt() {
  log_v2(2,"Entrando en leerBt()",-99,-99,-99,-99);
  String msg = "";
  char inChar;
  // posicionamiento al principio del mensaje
  while (Bt.available() && inChar != '#' ) {
    inChar = Bt.read();
    log_v2(3,"Bt- Leido y desechado: "+inChar,-99,-99,-99,-99);
  }  
  // carga msg hasta el final del mensaje
  while (Bt.available() && inChar != '/' ) {
    inChar = Bt.read();
    msg += inChar;
  }  
  log_v2(1,"MSG leido: #"+msg,-99,-99,-99,-99);
  formatear_msg(msg);
}


